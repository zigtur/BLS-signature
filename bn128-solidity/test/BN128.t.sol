// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {BN128Verifier} from "../src/BN128.sol";

contract BLSSignatureTest is Test {

    // @TUTO: Replace the following code with the one generated by `bn128_bls-multisignature-solidity-args.py`

    // G1 Aggregated Pubkey
    uint256 xPubKeyG1 = 9207453719489373051756240961272379029517886389063367119296373395262754572077;
    uint256 yPubKeyG1 = 11802145677257932672156011146439949373981044772621157985883223776679814900685;
    // G2 Aggregated Pubkey
    uint256 x1PubKeyG2 = 17062793437787135101220733661587893621790694291941104194538294548186496580485;
    uint256 x0PubKeyG2 = 6520141143179612673855683316361025523613881108702851079392679146296544857666;
    uint256 y1PubKeyG2 = 12955048236408856262091789879931980825659030252327927244764559921972316991189;
    uint256 y0PubKeyG2 = 2802737841447568395522641676801353356606719921805990332286896098105245176648;

    // G1 Aggregated signature
    uint256 xSignatureG1 = 15294126124123226581813238815066944402662770446441282465857257694013337523526;
    uint256 ySignatureG1 = 3604724007420157361809131876608096226300346873508503109061749277515976205602;
    uint256 sigHash = 80134284343160595821926009722438564156279219825762711202128188201158867481703;

    function setUp() public {
    }

    function test_ValidKeys() public {
        BN128Verifier.G1Point memory pubkeyG1 = BN128Verifier.G1Point(xPubKeyG1, yPubKeyG1);
        BN128Verifier.G2Point memory pubkeyG2 = BN128Verifier.G2Point([x1PubKeyG2, x0PubKeyG2], [y1PubKeyG2, y0PubKeyG2]);
        BN128Verifier.G1Point memory signature = BN128Verifier.G1Point(xSignatureG1, ySignatureG1);

        BN128Verifier.verifyPubkeyMatching(pubkeyG1, pubkeyG2);

        BN128Verifier.verifySignature(pubkeyG1, pubkeyG2, signature, sigHash);
    }

}
